/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('../../src/agGridColumn');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import2 = require('@angular/core/src/linker/view');
var import3 = require('@angular/core/src/linker/view_utils');
var import5 = require('@angular/core/src/metadata/view');
var import6 = require('@angular/core/src/linker/query_list');
var import7 = require('@angular/core/src/linker/view_type');
var import8 = require('@angular/core/src/change_detection/constants');
var import9 = require('@angular/core/src/linker/component_factory');
var Wrapper_AgGridColumn = (function () {
    function Wrapper_AgGridColumn() {
        this._changed = false;
        this.context = new import0.AgGridColumn();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
        this._expr_6 = import1.UNINITIALIZED;
        this._expr_7 = import1.UNINITIALIZED;
        this._expr_8 = import1.UNINITIALIZED;
        this._expr_9 = import1.UNINITIALIZED;
        this._expr_10 = import1.UNINITIALIZED;
        this._expr_11 = import1.UNINITIALIZED;
        this._expr_12 = import1.UNINITIALIZED;
        this._expr_13 = import1.UNINITIALIZED;
        this._expr_14 = import1.UNINITIALIZED;
        this._expr_15 = import1.UNINITIALIZED;
        this._expr_16 = import1.UNINITIALIZED;
        this._expr_17 = import1.UNINITIALIZED;
        this._expr_18 = import1.UNINITIALIZED;
        this._expr_19 = import1.UNINITIALIZED;
        this._expr_20 = import1.UNINITIALIZED;
        this._expr_21 = import1.UNINITIALIZED;
        this._expr_22 = import1.UNINITIALIZED;
        this._expr_23 = import1.UNINITIALIZED;
        this._expr_24 = import1.UNINITIALIZED;
        this._expr_25 = import1.UNINITIALIZED;
        this._expr_26 = import1.UNINITIALIZED;
        this._expr_27 = import1.UNINITIALIZED;
        this._expr_28 = import1.UNINITIALIZED;
        this._expr_29 = import1.UNINITIALIZED;
        this._expr_30 = import1.UNINITIALIZED;
        this._expr_31 = import1.UNINITIALIZED;
        this._expr_32 = import1.UNINITIALIZED;
        this._expr_33 = import1.UNINITIALIZED;
        this._expr_34 = import1.UNINITIALIZED;
        this._expr_35 = import1.UNINITIALIZED;
        this._expr_36 = import1.UNINITIALIZED;
        this._expr_37 = import1.UNINITIALIZED;
        this._expr_38 = import1.UNINITIALIZED;
        this._expr_39 = import1.UNINITIALIZED;
        this._expr_40 = import1.UNINITIALIZED;
        this._expr_41 = import1.UNINITIALIZED;
        this._expr_42 = import1.UNINITIALIZED;
        this._expr_43 = import1.UNINITIALIZED;
        this._expr_44 = import1.UNINITIALIZED;
        this._expr_45 = import1.UNINITIALIZED;
        this._expr_46 = import1.UNINITIALIZED;
        this._expr_47 = import1.UNINITIALIZED;
        this._expr_48 = import1.UNINITIALIZED;
        this._expr_49 = import1.UNINITIALIZED;
        this._expr_50 = import1.UNINITIALIZED;
        this._expr_51 = import1.UNINITIALIZED;
        this._expr_52 = import1.UNINITIALIZED;
        this._expr_53 = import1.UNINITIALIZED;
        this._expr_54 = import1.UNINITIALIZED;
        this._expr_55 = import1.UNINITIALIZED;
        this._expr_56 = import1.UNINITIALIZED;
        this._expr_57 = import1.UNINITIALIZED;
        this._expr_58 = import1.UNINITIALIZED;
        this._expr_59 = import1.UNINITIALIZED;
        this._expr_60 = import1.UNINITIALIZED;
        this._expr_61 = import1.UNINITIALIZED;
        this._expr_62 = import1.UNINITIALIZED;
        this._expr_63 = import1.UNINITIALIZED;
        this._expr_64 = import1.UNINITIALIZED;
        this._expr_65 = import1.UNINITIALIZED;
        this._expr_66 = import1.UNINITIALIZED;
    }
    Wrapper_AgGridColumn.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_AgGridColumn.prototype.ngOnDestroy = function () {
    };
    Wrapper_AgGridColumn.prototype.check_colId = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.colId = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_sort = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.sort = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_sortedAt = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.sortedAt = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_sortingOrder = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.sortingOrder = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_field = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.field = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_headerValueGetter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.headerValueGetter = currValue;
            this._expr_5 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_hide = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context.hide = currValue;
            this._expr_6 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_pinned = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_7, currValue))) {
            this._changed = true;
            this.context.pinned = currValue;
            this._expr_7 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_tooltipField = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_8, currValue))) {
            this._changed = true;
            this.context.tooltipField = currValue;
            this._expr_8 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_headerTooltip = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_9, currValue))) {
            this._changed = true;
            this.context.headerTooltip = currValue;
            this._expr_9 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_valueGetter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_10, currValue))) {
            this._changed = true;
            this.context.valueGetter = currValue;
            this._expr_10 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_keyCreator = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_11, currValue))) {
            this._changed = true;
            this.context.keyCreator = currValue;
            this._expr_11 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_headerCellRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_12, currValue))) {
            this._changed = true;
            this.context.headerCellRenderer = currValue;
            this._expr_12 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_headerCellTemplate = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_13, currValue))) {
            this._changed = true;
            this.context.headerCellTemplate = currValue;
            this._expr_13 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_width = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_14, currValue))) {
            this._changed = true;
            this.context.width = currValue;
            this._expr_14 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_minWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_15, currValue))) {
            this._changed = true;
            this.context.minWidth = currValue;
            this._expr_15 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_maxWidth = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_16, currValue))) {
            this._changed = true;
            this.context.maxWidth = currValue;
            this._expr_16 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_17, currValue))) {
            this._changed = true;
            this.context.cellClass = currValue;
            this._expr_17 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellStyle = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_18, currValue))) {
            this._changed = true;
            this.context.cellStyle = currValue;
            this._expr_18 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_19, currValue))) {
            this._changed = true;
            this.context.cellRenderer = currValue;
            this._expr_19 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellRendererFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_20, currValue))) {
            this._changed = true;
            this.context.cellRendererFramework = currValue;
            this._expr_20 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellRendererParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_21, currValue))) {
            this._changed = true;
            this.context.cellRendererParams = currValue;
            this._expr_21 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellEditor = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_22, currValue))) {
            this._changed = true;
            this.context.cellEditor = currValue;
            this._expr_22 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellEditorFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_23, currValue))) {
            this._changed = true;
            this.context.cellEditorFramework = currValue;
            this._expr_23 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellEditorParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_24, currValue))) {
            this._changed = true;
            this.context.cellEditorParams = currValue;
            this._expr_24 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_floatingCellRenderer = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_25, currValue))) {
            this._changed = true;
            this.context.floatingCellRenderer = currValue;
            this._expr_25 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_floatingCellRendererFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_26, currValue))) {
            this._changed = true;
            this.context.floatingCellRendererFramework = currValue;
            this._expr_26 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_floatingCellRendererParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_27, currValue))) {
            this._changed = true;
            this.context.floatingCellRendererParams = currValue;
            this._expr_27 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellFormatter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_28, currValue))) {
            this._changed = true;
            this.context.cellFormatter = currValue;
            this._expr_28 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_floatingCellFormatter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_29, currValue))) {
            this._changed = true;
            this.context.floatingCellFormatter = currValue;
            this._expr_29 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_aggFunc = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_30, currValue))) {
            this._changed = true;
            this.context.aggFunc = currValue;
            this._expr_30 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_rowGroupIndex = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_31, currValue))) {
            this._changed = true;
            this.context.rowGroupIndex = currValue;
            this._expr_31 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_pivotIndex = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_32, currValue))) {
            this._changed = true;
            this.context.pivotIndex = currValue;
            this._expr_32 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_comparator = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_33, currValue))) {
            this._changed = true;
            this.context.comparator = currValue;
            this._expr_33 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_checkboxSelection = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_34, currValue))) {
            this._changed = true;
            this.context.checkboxSelection = currValue;
            this._expr_34 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressMenu = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_35, currValue))) {
            this._changed = true;
            this.context.suppressMenu = currValue;
            this._expr_35 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressSorting = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_36, currValue))) {
            this._changed = true;
            this.context.suppressSorting = currValue;
            this._expr_36 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressMovable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_37, currValue))) {
            this._changed = true;
            this.context.suppressMovable = currValue;
            this._expr_37 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressFilter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_38, currValue))) {
            this._changed = true;
            this.context.suppressFilter = currValue;
            this._expr_38 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_unSortIcon = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_39, currValue))) {
            this._changed = true;
            this.context.unSortIcon = currValue;
            this._expr_39 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressSizeToFit = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_40, currValue))) {
            this._changed = true;
            this.context.suppressSizeToFit = currValue;
            this._expr_40 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressResize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_41, currValue))) {
            this._changed = true;
            this.context.suppressResize = currValue;
            this._expr_41 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressAutoSize = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_42, currValue))) {
            this._changed = true;
            this.context.suppressAutoSize = currValue;
            this._expr_42 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_enableRowGroup = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_43, currValue))) {
            this._changed = true;
            this.context.enableRowGroup = currValue;
            this._expr_43 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_enablePivot = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_44, currValue))) {
            this._changed = true;
            this.context.enablePivot = currValue;
            this._expr_44 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_enableValue = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_45, currValue))) {
            this._changed = true;
            this.context.enableValue = currValue;
            this._expr_45 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_editable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_46, currValue))) {
            this._changed = true;
            this.context.editable = currValue;
            this._expr_46 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_suppressNavigable = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_47, currValue))) {
            this._changed = true;
            this.context.suppressNavigable = currValue;
            this._expr_47 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_newValueHandler = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_48, currValue))) {
            this._changed = true;
            this.context.newValueHandler = currValue;
            this._expr_48 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_volatile = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_49, currValue))) {
            this._changed = true;
            this.context.volatile = currValue;
            this._expr_49 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_filter = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_50, currValue))) {
            this._changed = true;
            this.context.filter = currValue;
            this._expr_50 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_filterFramework = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_51, currValue))) {
            this._changed = true;
            this.context.filterFramework = currValue;
            this._expr_51 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_filterParams = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_52, currValue))) {
            this._changed = true;
            this.context.filterParams = currValue;
            this._expr_52 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_cellClassRules = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_53, currValue))) {
            this._changed = true;
            this.context.cellClassRules = currValue;
            this._expr_53 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_onCellValueChanged = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_54, currValue))) {
            this._changed = true;
            this.context.onCellValueChanged = currValue;
            this._expr_54 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_onCellClicked = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_55, currValue))) {
            this._changed = true;
            this.context.onCellClicked = currValue;
            this._expr_55 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_onCellDoubleClicked = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_56, currValue))) {
            this._changed = true;
            this.context.onCellDoubleClicked = currValue;
            this._expr_56 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_onCellContextMenu = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_57, currValue))) {
            this._changed = true;
            this.context.onCellContextMenu = currValue;
            this._expr_57 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_icons = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_58, currValue))) {
            this._changed = true;
            this.context.icons = currValue;
            this._expr_58 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_enableCellChangeFlash = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_59, currValue))) {
            this._changed = true;
            this.context.enableCellChangeFlash = currValue;
            this._expr_59 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_headerName = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_60, currValue))) {
            this._changed = true;
            this.context.headerName = currValue;
            this._expr_60 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_columnGroupShow = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_61, currValue))) {
            this._changed = true;
            this.context.columnGroupShow = currValue;
            this._expr_61 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_headerClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_62, currValue))) {
            this._changed = true;
            this.context.headerClass = currValue;
            this._expr_62 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_children = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_63, currValue))) {
            this._changed = true;
            this.context.children = currValue;
            this._expr_63 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_groupId = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_64, currValue))) {
            this._changed = true;
            this.context.groupId = currValue;
            this._expr_64 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_openByDefault = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_65, currValue))) {
            this._changed = true;
            this.context.openByDefault = currValue;
            this._expr_65 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.check_marryChildren = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_66, currValue))) {
            this._changed = true;
            this.context.marryChildren = currValue;
            this._expr_66 = currValue;
        }
    };
    Wrapper_AgGridColumn.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_AgGridColumn.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_AgGridColumn.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_AgGridColumn.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_AgGridColumn;
}());
exports.Wrapper_AgGridColumn = Wrapper_AgGridColumn;
var renderType_AgGridColumn_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_AgGridColumn_Host0 = (function (_super) {
    __extends(View_AgGridColumn_Host0, _super);
    function View_AgGridColumn_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_AgGridColumn_Host0, renderType_AgGridColumn_Host, import7.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    View_AgGridColumn_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ag-grid-column', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_AgGridColumn0(this.viewUtils, this, 0, this._el_0);
        this._AgGridColumn_0_3 = new Wrapper_AgGridColumn();
        this._query_AgGridColumn_0_0 = new import6.QueryList();
        this.compView_0.create(this._AgGridColumn_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import9.ComponentRef_(0, this, this._el_0, this._AgGridColumn_0_3.context);
    };
    View_AgGridColumn_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.AgGridColumn) && (0 === requestNodeIndex))) {
            return this._AgGridColumn_0_3.context;
        }
        return notFoundResult;
    };
    View_AgGridColumn_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._AgGridColumn_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        if (!throwOnChange) {
            if (this._query_AgGridColumn_0_0.dirty) {
                this._query_AgGridColumn_0_0.reset([this._AgGridColumn_0_3.context]);
                this._AgGridColumn_0_3.context.childColumns = this._query_AgGridColumn_0_0;
                this._query_AgGridColumn_0_0.notifyOnChanges();
            }
        }
        this.compView_0.detectChanges(throwOnChange);
    };
    View_AgGridColumn_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_AgGridColumn_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_AgGridColumn_Host0;
}(import2.AppView));
exports.AgGridColumnNgFactory = new import9.ComponentFactory('ag-grid-column', View_AgGridColumn_Host0, import0.AgGridColumn);
var styles_AgGridColumn = [];
var renderType_AgGridColumn = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_AgGridColumn, {});
var View_AgGridColumn0 = (function (_super) {
    __extends(View_AgGridColumn0, _super);
    function View_AgGridColumn0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_AgGridColumn0, renderType_AgGridColumn, import7.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import8.ChangeDetectorStatus.CheckAlways);
    }
    View_AgGridColumn0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this.init(null, (this.renderer.directRenderer ? null : []), null);
        return null;
    };
    return View_AgGridColumn0;
}(import2.AppView));
exports.View_AgGridColumn0 = View_AgGridColumn0;
//# sourceMappingURL=agGridColumn.ngfactory.js.map
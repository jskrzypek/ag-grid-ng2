/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
import * as import0 from '../../src/agGridColumn';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/linker/component_factory';
export declare class Wrapper_AgGridColumn {
    _eventHandler: Function;
    context: import0.AgGridColumn;
    _changed: boolean;
    _expr_0: any;
    _expr_1: any;
    _expr_2: any;
    _expr_3: any;
    _expr_4: any;
    _expr_5: any;
    _expr_6: any;
    _expr_7: any;
    _expr_8: any;
    _expr_9: any;
    _expr_10: any;
    _expr_11: any;
    _expr_12: any;
    _expr_13: any;
    _expr_14: any;
    _expr_15: any;
    _expr_16: any;
    _expr_17: any;
    _expr_18: any;
    _expr_19: any;
    _expr_20: any;
    _expr_21: any;
    _expr_22: any;
    _expr_23: any;
    _expr_24: any;
    _expr_25: any;
    _expr_26: any;
    _expr_27: any;
    _expr_28: any;
    _expr_29: any;
    _expr_30: any;
    _expr_31: any;
    _expr_32: any;
    _expr_33: any;
    _expr_34: any;
    _expr_35: any;
    _expr_36: any;
    _expr_37: any;
    _expr_38: any;
    _expr_39: any;
    _expr_40: any;
    _expr_41: any;
    _expr_42: any;
    _expr_43: any;
    _expr_44: any;
    _expr_45: any;
    _expr_46: any;
    _expr_47: any;
    _expr_48: any;
    _expr_49: any;
    _expr_50: any;
    _expr_51: any;
    _expr_52: any;
    _expr_53: any;
    _expr_54: any;
    _expr_55: any;
    _expr_56: any;
    _expr_57: any;
    _expr_58: any;
    _expr_59: any;
    _expr_60: any;
    _expr_61: any;
    _expr_62: any;
    _expr_63: any;
    _expr_64: any;
    _expr_65: any;
    _expr_66: any;
    constructor();
    ngOnDetach(view: import2.AppView<any>, componentView: import2.AppView<any>, el: any): void;
    ngOnDestroy(): void;
    check_colId(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_sort(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_sortedAt(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_sortingOrder(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_field(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_headerValueGetter(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_hide(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_pinned(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_tooltipField(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_headerTooltip(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_valueGetter(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_keyCreator(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_headerCellRenderer(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_headerCellTemplate(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_width(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_minWidth(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_maxWidth(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellClass(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellStyle(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellRenderer(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellRendererFramework(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellRendererParams(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellEditor(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellEditorFramework(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellEditorParams(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_floatingCellRenderer(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_floatingCellRendererFramework(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_floatingCellRendererParams(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellFormatter(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_floatingCellFormatter(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_aggFunc(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_rowGroupIndex(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_pivotIndex(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_comparator(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_checkboxSelection(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressMenu(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressSorting(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressMovable(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressFilter(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_unSortIcon(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressSizeToFit(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressResize(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressAutoSize(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_enableRowGroup(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_enablePivot(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_enableValue(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_editable(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_suppressNavigable(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_newValueHandler(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_volatile(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_filter(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_filterFramework(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_filterParams(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cellClassRules(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_onCellValueChanged(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_onCellClicked(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_onCellDoubleClicked(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_onCellContextMenu(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_icons(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_enableCellChangeFlash(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_headerName(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_columnGroupShow(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_headerClass(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_children(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_groupId(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_openByDefault(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_marryChildren(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    ngDoCheck(view: import2.AppView<any>, el: any, throwOnChange: boolean): boolean;
    checkHost(view: import2.AppView<any>, componentView: import2.AppView<any>, el: any, throwOnChange: boolean): void;
    handleEvent(eventName: string, $event: any): boolean;
    subscribe(view: import2.AppView<any>, _eventHandler: any): void;
}
export declare const AgGridColumnNgFactory: import9.ComponentFactory<import0.AgGridColumn>;
export declare class View_AgGridColumn0 extends import2.AppView<import0.AgGridColumn> {
    constructor(viewUtils: import3.ViewUtils, parentView: import2.AppView<any>, parentIndex: number, parentElement: any);
    createInternal(rootSelector: string): import9.ComponentRef<any>;
}
